Considere uma lista de inteiros L de tamanho n
L: [16 19 41 8 42 39 33 22 29 48]
Considere o seguinte algoritmo que percorre a lista e realiza operações sobre os elementos da
lista de acordo com o resto da divisão do elemento por 3.

  triplicidade ( )
1     i ← 0                                       (1x)
2     enquanto i < n faça                         (n+1)
3         se 3 % L [ i ] = 0 então                (n)
4             L [ i ] = L [ i ] ∗ 3               
5             L [ i ] = L [ i ] ∗ L [ i ]         
6         senão
7             se 3 % L [ i ] = 1 então             (x1+x2)
8                 imprimir('Uhuuuuu ! ')
9             senão
10                se 3 % L [ i ] = 2 então          |
11                    L [ i ] = i ∗ L [ i ]         | 4*x2
12                    L [ i ] = L [ i ] / 3         |
13                    L [ i ] = L [ i ] − 1         |
14        i ← i + 1                                 (1x)

Suponha que a quantidade de elementos divisíveis por 3 é x0, os que deixam resto 1 na divisão
por 3 é x1, e a quantidade de elementos que deixam resto 2 na divisão por 3 é x2 (consequentemente, x0 + x1 + x2 = n).
a) Quantas vezes a linha 2 será executada?
R: n+1 vezes

b) Quantas vezes a linha 7 será executada?
R: x1+x2 ou n-x0 vezes

c) Qual o total de execuções de instruções do algoritmo?
R: 12

d) No melhor e no pior caso, quais os números de execuções de instruções realizadas?
R: 
melhor caso(todos elementos possuem resto 0) = 5n + 2
pior caso(todos elementos possuem resto 2) = 2n + 5*x2 + x1 + 3